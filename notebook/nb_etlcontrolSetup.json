{
	"name": "nb_etlcontrolSetup",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpoolmed",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4267b198-b473-4d53-b9f4-72412d5a5d0f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/1a8f2456-71f5-4894-9064-fbbd6756370d/resourceGroups/rg_lace/providers/Microsoft.Synapse/workspaces/synlacedccc/bigDataPools/sparkpoolmed",
				"name": "sparkpoolmed",
				"type": "Spark",
				"endpoint": "https://synlacedccc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoolmed",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#spark.sql(\"DROP DATABASE IF EXISTS etlcontrol CASCADE\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sqlQuery = \"CREATE DATABASE IF NOT EXISTS etlcontrol LOCATION 'abfss://adlsfslacedccc@adlslacedccc.dfs.core.windows.net/etlcontrol'\"\r\n",
					"print(sqlQuery)\r\n",
					"spark.sql(sqlQuery)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"CREATE TABLE IF NOT EXISTS etlcontrol.IngestionList (IngestionListKey int, SourceName varchar(100),SourceSchemaName varchar(100),SourceTableName varchar(500),IsIncrementalLoad boolean,WatermarkColumn varchar(100),WatermarkValue varchar(100),PrimaryKey varchar(500), PipelineProcessingGroup varchar(100),IsActive boolean) USING DELTA LOCATION 'abfss://adlsfslacedccc@adlslacedccc.dfs.core.windows.net/etlcontrol/IngestionList' \")\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"INSERT INTO etlcontrol.IngestionList (IngestionListKey, SourceName,SourceSchemaName,SourceTableName,IsIncrementalLoad,WatermarkColumn,WatermarkValue,PrimaryKey,PipelineProcessingGroup,IsActive) VALUES \\\r\n",
					"(1, 'LACEDemo',  'Source', 'Employee', false, NULL, NULL, NULL, 'LACEDemo', true ),\\\r\n",
					"(2, 'LACEDemo',  'dbo', 'dimLocation',  false, NULL, NULL, NULL, 'LACEDemo', true), \\\r\n",
					"(3, 'LACEDemo',  'dbo', 'SalesOrderDetail',  false, NULL, NULL, NULL, 'LACEDemo', true), \\\r\n",
					"(4, 'LACEDemo', NULL, NULL, true, 'Watermark Column', 'Watermark Value', 'PK for Merge', 'LaceDemo', true) \\\r\n",
					"\")\r\n",
					""
				],
				"execution_count": 8
			}
		]
	}
}