{
	"name": "nb_etlControl_DimTables",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e3f142bf-b470-43e7-8753-1e1f8331ce30"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import datetime, date\r\n",
					"\r\n",
					"print(datetime.now())"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# -----------------------------------\r\n",
					"#spark.sql(\"DROP TABLE etlcontrol.IngestionList_dim\") "
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					}
				},
				"source": [
					"#spark.sql(\"CREATE TABLE IF NOT EXISTS etlcontrol.IngestionList_dim (ListKey INT, DimensionType INT, DatabaseName VARCHAR(100), SchemaName VARCHAR(100), TableName VARCHAR(100), SurrogateKey VARCHAR(100),\tSurrogateKeyIsIdentity BOOLEAN,\tNaturalKeyColumnList VARCHAR(100), UnknownNaturalKeyList VARCHAR(100),IsActive BOOLEAN,\tSQLQuery VARCHAR(2000))  USING DELTA LOCATION 'abfss://fs-analyticsdev@dlsdccanalyticsdev.dfs.core.windows.net/etlcontrol/IngestionList_dim' \")\r\n",
					"\r\n",
					"spark.sql(\"DELETE FROM etlcontrol.IngestionList_dim\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"INSERT INTO etlcontrol.IngestionList_dim (ListKey, DimensionType,DatabaseName,SchemaName,TableName,SurrogateKey,SurrogateKeyIsIdentity,NaturalKeyColumnList,UnknownNaturalKeyList,IsActive,SQLQuery) VALUES \\\r\n",
					"(1, 2, 'gold', 'Dim', 'AcclaimUser', 'SK_User', false, '[\\\"UserId\\\"]', '[-1]', true, 'SELECT UserId, UserName, EmailAddress FROM silver.acclaim_dbo_tbluser' ), \\\r\n",
					"(2, 1, 'gold', 'Dim', 'AcclaimAgent', 'SK_Agent', false, '[\\\"AgentId\\\"]', '[-1]', true, 'SELECT AgentId, AgentKey, Active, CanDeferPayment, Name FROM silver.acclaim_dbo_tblagent' ), \\\r\n",
					"(3, 1, 'gold', 'Dim', 'AcclaimBranch', 'SK_Branch', false, '[\\\"BranchId\\\"]', '[-1]', true, 'SELECT BranchId, Name FROM silver.acclaim_dbo_tblbranch' ), \\\r\n",
					"(4, 1, 'gold', 'Dim', 'AcclaimQueue', 'SK_Queue', false, '[\\\"QueueId\\\"]', '[-1]', true, 'SELECT QueueId, Name FROM silver.acclaim_dbo_tblqueue' ), \\\r\n",
					"(5, 1, 'gold', 'Dim', 'AcclaimDocType', 'SK_DocType', false,'[\\\"DocTypeId\\\"]', '[-1]', true, 'SELECT DocTypeId, Active, Abbreviation, Description, GLAccountId, CASE Abbreviation WHEN [tm]A\\/CDEED[tm] THEN [tm]DEED[tm] WHEN [tm]MLC[tm] THEN [tm]ML[tm] WHEN [tm]MMOD[tm] THEN [tm]MOD[tm] WHEN [tm]MODCU[tm] THEN [tm]MOD[tm] WHEN [tm]SATNF[tm] THEN [tm]SAT[tm] WHEN [tm]MTGND[tm] THEN [tm]MTG[tm] WHEN [tm]MTGNI[tm] THEN [tm]MTG[tm] WHEN [tm]MTGTF[tm] THEN [tm]MTG[tm] WHEN [tm]MTGG[tm] THEN [tm]MTG[tm] WHEN [tm]MTGCU[tm] THEN [tm]MTG[tm] WHEN [tm]NOTBOND[tm] THEN [tm]NOTICE[tm] WHEN [tm]NOTCONTE[tm] THEN [tm]NOTICE[tm] WHEN [tm]NOTHOMEST[tm] THEN [tm]NOTICE[tm] WHEN [tm]NOTICE[tm] THEN [tm]NOTICE[tm] ELSE Abbreviation END AS DocTypeGroup FROM silver.acclaim_dbo_tbldoctype'), \\\r\n",
					"(6, 1, 'gold', 'Dim', 'AcclaimSourceCode', 'SK_SourceCode', false, '[\\\"SourceCodeId\\\"]', '[-1]', true, 'SELECT SourceCodeID, Code, Description, CASE Code WHEN [tm]INTERNALERECORD[tm] THEN 0 ELSE 1 END AS PaidSource FROM silver.acclaim_dbo_tblsourcecode') \\\r\n",
					"\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# -------- Test INSERT COMMAND\r\n",
					"spark.sql(\"\"\"\r\n",
					"INSERT INTO etlcontrol.IngestionList_dim (ListKey, DimensionType,DatabaseName,SchemaName,TableName,SurrogateKey,SurrogateKeyIsIdentity,NaturalKeyColumnList,UnknownNaturalKeyList,IsActive,SQLQuery) VALUES \r\n",
					"(7, 2, 'gold', 'Dim', 'AcclaimDocType', 'DocTypeSK', false,'DocTypeID', '-1', true, 'SELECT DocTypeId, Active, Abbreviation, Description, GLAccountId, DocTypeGroup = CASE Abbreviation WHEN ''A\\/CDEED'' THEN ''DEED'' WHEN ''MLC'' THEN ''ML'' WHEN ''MMOD'' THEN ''MOD'' WHEN ''MODCU'' THEN ''MOD'' WHEN ''SATNF'' THEN ''SAT'' WHEN ''MTGND'' THEN ''MTG'' WHEN ''MTGNI'' THEN ''MTG'' WHEN ''MTGTF'' THEN ''MTG'' WHEN ''MTGG'' THEN ''MTG'' WHEN ''MTGCU'' THEN ''MTG'' WHEN ''NOTBOND'' THEN ''NOTICE'' WHEN ''NOTCONTE'' THEN ''NOTICE'' WHEN ''NOTHOMEST'' THEN ''NOTICE'' WHEN ''NOTICE'' THEN ''NOTICE'' ELSE Abbreviation END FROM silver.acclaim_dbo_tbldocket') \r\n",
					"\"\"\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT SQLQuery FROM etlcontrol.ingestionlist_dim ORDER BY ListKey DESC"
				],
				"execution_count": 5
			}
		]
	}
}