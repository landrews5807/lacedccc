{
	"name": "common_transformations",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpoolmed",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "74baf9b9-b07f-46e9-94c8-e56998fbbc94"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/1a8f2456-71f5-4894-9064-fbbd6756370d/resourceGroups/rg_lace/providers/Microsoft.Synapse/workspaces/synlacedccc/bigDataPools/sparkpoolmed",
				"name": "sparkpoolmed",
				"type": "Spark",
				"endpoint": "https://synlacedccc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoolmed",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as F, types as T, Window as W"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"def with_type2_columns(df):\r\n",
					"    return (\r\n",
					"        df\r\n",
					"        .select(\r\n",
					"            \"*\",\r\n",
					"            F.current_timestamp().alias(\"effective_date\"),\r\n",
					"            F.lit('2999-12-31 11:59:59').alias(\"end_date\"),\r\n",
					"            F.lit(True).alias(\"IsActive\")\r\n",
					"        )\r\n",
					"    )"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def with_naturalkey(df, nk_col_name, cols):\r\n",
					"    return(\r\n",
					"        df\r\n",
					"        .select(\r\n",
					"            F.concat_ws(\"|\", *[F.col(c) for c in cols]).alias(nk_col_name),\r\n",
					"            \"*\",\r\n",
					"        )\r\n",
					"    )"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def with_age(df, birthdate_column):\r\n",
					"    # Convert birthdate column to date format (if is is not already)\r\n",
					"    df = df.withColumn(birthdate_column, F.col(birthdate_column).cast(T.DateType()))\r\n",
					"\r\n",
					"    # Calculate the age: floor the difference in days between current date and birthdate divided by 365\r\n",
					"    age_column = F.floor(F.datediff(F.current_date(), F.col(birthdate_column).cast(T.DateType)))/365\r\n",
					"\r\n",
					"    df = df.withColumn(\"age\", age_column)\r\n",
					"\r\n",
					"    return df"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def replace_null(df):\r\n",
					"    return df.fillna('')"
				],
				"execution_count": 5
			}
		]
	}
}