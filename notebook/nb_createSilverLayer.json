{
	"name": "nb_createSilverLayer",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpoolmed",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a975d024-86bd-46c6-9358-976bd9685bd1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/1a8f2456-71f5-4894-9064-fbbd6756370d/resourceGroups/rg_lace/providers/Microsoft.Synapse/workspaces/synlacedccc/bigDataPools/sparkpoolmed",
				"name": "sparkpoolmed",
				"type": "Spark",
				"endpoint": "https://synlacedccc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoolmed",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from datetime import datetime, date"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#spark.sql(\"DROP DATABASE IF EXISTS silver CASCADE\")"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"source": [
					"sqlQuery = \"CREATE DATABASE IF NOT EXISTS silver LOCATION 'abfss://adlsfslacedccc@adlslacedccc.dfs.core.windows.net/silver'\"\r\n",
					"print(sqlQuery)\r\n",
					"spark.sql(sqlQuery)\r\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Get today's date\r\n",
					"today = datetime.now()\r\n",
					"\r\n",
					"# Extract year, month, and day\r\n",
					"year_value = today.year\r\n",
					"month_value = today.month\r\n",
					"day_value = today.day\r\n",
					"\r\n",
					"print(year_value, month_value, day_value)\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM etlcontrol.IngestionList where IsActive = true\")\r\n",
					"\r\n",
					"rows = df.collect()\r\n",
					"\r\n",
					"for row in rows:\r\n",
					"    print(row.SourceName, row.SourceSchemaName, row.SourceTableName)\r\n",
					"    raw_file_name = f\"abfss://adlsfslacedccc@adlslacedccc.dfs.core.windows.net/bronze/{row.SourceName}/{row.SourceSchemaName}/{row.SourceTableName}/{year_value}/{month_value}/{day_value}/{row.SourceSchemaName}.{row.SourceTableName}.parquet\"\r\n",
					"    silver_file = f\"abfss://adlsfslacedccc@adlslacedccc.dfs.core.windows.net/silver/{row.SourceName}_{row.SourceSchemaName}_{row.SourceTableName}/\"\r\n",
					"\r\n",
					"    df = spark.read.parquet(raw_file_name)\r\n",
					"    df = df.withColumn('LoadDateTime', expr(\"CURRENT_TIMESTAMP\"))\r\n",
					"    df = df.withColumn('SourceSystem', lit('LACE_Demo'))\r\n",
					"    df.write.option('path', silver_file).mode('overwrite').format('delta').saveAsTable('silver.{row.SourceName}_{row.SourceSchemaName}_{row.SourceTableName}')"
				],
				"execution_count": 48
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"raw_file_name = \"abfss://adlsfslacedccc@adlslacedccc.dfs.core.windows.net/bronze/LACEDemo/Source/Employee/2025/01/14/Source.Employee.parquet\"\r\n",
					"silver_file = \"abfss://adlsfslacedccc@adlslacedccc.dfs.core.windows.net/silver/lace_source_employee/\"\r\n",
					"\r\n",
					"df = spark.read.parquet(raw_file_name)\r\n",
					"df = df.withColumn('LoadDateTime', expr(\"CURRENT_TIMESTAMP\"))\r\n",
					"df = df.withColumn('SourceSystem', lit('LACE_Demo'))\r\n",
					"\r\n",
					"display(df)\r\n",
					"df.write.option('path', silver_file).mode('overwrite').format('delta').saveAsTable('silver.lace_source_employee')"
				]
			}
		]
	}
}